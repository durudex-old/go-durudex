// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/durudex/go-durudex/types"
	"github.com/segmentio/ksuid"
)

// CreatePostResponse is returned by CreatePost on success.
type CreatePostResponse struct {
	// Create a new user post.
	CreatePost ksuid.KSUID `json:"createPost"`
}

// GetCreatePost returns CreatePostResponse.CreatePost, and is useful for accessing the field via an interface.
func (v *CreatePostResponse) GetCreatePost() ksuid.KSUID { return v.CreatePost }

// DeletePostResponse is returned by DeletePost on success.
type DeletePostResponse struct {
	// Delete user post.
	DeletePost bool `json:"deletePost"`
}

// GetDeletePost returns DeletePostResponse.DeletePost, and is useful for accessing the field via an interface.
func (v *DeletePostResponse) GetDeletePost() bool { return v.DeletePost }

// DeleteSessionResponse is returned by DeleteSession on success.
type DeleteSessionResponse struct {
	// Delete user session.
	DeleteSession bool `json:"deleteSession"`
}

// GetDeleteSession returns DeleteSessionResponse.DeleteSession, and is useful for accessing the field via an interface.
func (v *DeleteSessionResponse) GetDeleteSession() bool { return v.DeleteSession }

// ForgotPasswordResponse is returned by ForgotPassword on success.
type ForgotPasswordResponse struct {
	// Forgot user password.
	ForgotPassword bool `json:"forgotPassword"`
}

// GetForgotPassword returns ForgotPasswordResponse.ForgotPassword, and is useful for accessing the field via an interface.
func (v *ForgotPasswordResponse) GetForgotPassword() bool { return v.ForgotPassword }

// GetMeResponse is returned by GetMe on success.
type GetMeResponse struct {
	// Getting me.
	Me types.User `json:"me"`
}

// GetMe returns GetMeResponse.Me, and is useful for accessing the field via an interface.
func (v *GetMeResponse) GetMe() types.User { return v.Me }

// GetPostResponse is returned by GetPost on success.
type GetPostResponse struct {
	// Getting user post.
	Post *types.Post `json:"post"`
}

// GetPost returns GetPostResponse.Post, and is useful for accessing the field via an interface.
func (v *GetPostResponse) GetPost() *types.Post { return v.Post }

// GetSessionResponse is returned by GetSession on success.
type GetSessionResponse struct {
	// Getting user session.
	Session *types.Session `json:"session"`
}

// GetSession returns GetSessionResponse.Session, and is useful for accessing the field via an interface.
func (v *GetSessionResponse) GetSession() *types.Session { return v.Session }

// GetSessionsEdgesResponse is returned by GetSessionsEdges on success.
type GetSessionsEdgesResponse struct {
	// Getting user sessions.
	Sessions types.SessionConnection `json:"sessions"`
}

// GetSessions returns GetSessionsEdgesResponse.Sessions, and is useful for accessing the field via an interface.
func (v *GetSessionsEdgesResponse) GetSessions() types.SessionConnection { return v.Sessions }

// GetSessionsNodesResponse is returned by GetSessionsNodes on success.
type GetSessionsNodesResponse struct {
	// Getting user sessions.
	Sessions types.SessionConnection `json:"sessions"`
}

// GetSessions returns GetSessionsNodesResponse.Sessions, and is useful for accessing the field via an interface.
func (v *GetSessionsNodesResponse) GetSessions() types.SessionConnection { return v.Sessions }

// GetTotalSessionsCountResponse is returned by GetTotalSessionsCount on success.
type GetTotalSessionsCountResponse struct {
	// Getting user sessions.
	Sessions types.SessionConnection `json:"sessions"`
}

// GetSessions returns GetTotalSessionsCountResponse.Sessions, and is useful for accessing the field via an interface.
func (v *GetTotalSessionsCountResponse) GetSessions() types.SessionConnection { return v.Sessions }

// GetTotalUserPostsCountResponse is returned by GetTotalUserPostsCount on success.
type GetTotalUserPostsCountResponse struct {
	// Getting user.
	User *types.User `json:"user"`
}

// GetUser returns GetTotalUserPostsCountResponse.User, and is useful for accessing the field via an interface.
func (v *GetTotalUserPostsCountResponse) GetUser() *types.User { return v.User }

// GetUserPostsEdgesResponse is returned by GetUserPostsEdges on success.
type GetUserPostsEdgesResponse struct {
	// Getting user.
	User *types.User `json:"user"`
}

// GetUser returns GetUserPostsEdgesResponse.User, and is useful for accessing the field via an interface.
func (v *GetUserPostsEdgesResponse) GetUser() *types.User { return v.User }

// GetUserPostsNodesResponse is returned by GetUserPostsNodes on success.
type GetUserPostsNodesResponse struct {
	// Getting user.
	User *types.User `json:"user"`
}

// GetUser returns GetUserPostsNodesResponse.User, and is useful for accessing the field via an interface.
func (v *GetUserPostsNodesResponse) GetUser() *types.User { return v.User }

// GetUserResponse is returned by GetUser on success.
type GetUserResponse struct {
	// Getting user.
	User *types.User `json:"user"`
}

// GetUser returns GetUserResponse.User, and is useful for accessing the field via an interface.
func (v *GetUserResponse) GetUser() *types.User { return v.User }

// RefreshTokenResponse is returned by RefreshToken on success.
type RefreshTokenResponse struct {
	// Refresh authorization token.
	RefreshToken string `json:"refreshToken"`
}

// GetRefreshToken returns RefreshTokenResponse.RefreshToken, and is useful for accessing the field via an interface.
func (v *RefreshTokenResponse) GetRefreshToken() string { return v.RefreshToken }

// SignInResponse is returned by SignIn on success.
type SignInResponse struct {
	// User Sign In.
	SignIn types.Tokens `json:"signIn"`
}

// GetSignIn returns SignInResponse.SignIn, and is useful for accessing the field via an interface.
func (v *SignInResponse) GetSignIn() types.Tokens { return v.SignIn }

// SignUpResponse is returned by SignUp on success.
type SignUpResponse struct {
	// User Sign Up.
	SignUp types.Tokens `json:"signUp"`
}

// GetSignUp returns SignUpResponse.SignUp, and is useful for accessing the field via an interface.
func (v *SignUpResponse) GetSignUp() types.Tokens { return v.SignUp }

// UpdatePostResponse is returned by UpdatePost on success.
type UpdatePostResponse struct {
	// Update user post.
	UpdatePost bool `json:"updatePost"`
}

// GetUpdatePost returns UpdatePostResponse.UpdatePost, and is useful for accessing the field via an interface.
func (v *UpdatePostResponse) GetUpdatePost() bool { return v.UpdatePost }

// __CreatePostInput is used internally by genqlient
type __CreatePostInput struct {
	Input types.CreatePostInput `json:"input"`
}

// GetInput returns __CreatePostInput.Input, and is useful for accessing the field via an interface.
func (v *__CreatePostInput) GetInput() types.CreatePostInput { return v.Input }

// __DeletePostInput is used internally by genqlient
type __DeletePostInput struct {
	Id ksuid.KSUID `json:"id"`
}

// GetId returns __DeletePostInput.Id, and is useful for accessing the field via an interface.
func (v *__DeletePostInput) GetId() ksuid.KSUID { return v.Id }

// __DeleteSessionInput is used internally by genqlient
type __DeleteSessionInput struct {
	Id ksuid.KSUID `json:"id"`
}

// GetId returns __DeleteSessionInput.Id, and is useful for accessing the field via an interface.
func (v *__DeleteSessionInput) GetId() ksuid.KSUID { return v.Id }

// __ForgotPasswordInput is used internally by genqlient
type __ForgotPasswordInput struct {
	Input types.ForgotPasswordInput `json:"input"`
}

// GetInput returns __ForgotPasswordInput.Input, and is useful for accessing the field via an interface.
func (v *__ForgotPasswordInput) GetInput() types.ForgotPasswordInput { return v.Input }

// __GetPostInput is used internally by genqlient
type __GetPostInput struct {
	Id ksuid.KSUID `json:"id"`
}

// GetId returns __GetPostInput.Id, and is useful for accessing the field via an interface.
func (v *__GetPostInput) GetId() ksuid.KSUID { return v.Id }

// __GetSessionInput is used internally by genqlient
type __GetSessionInput struct {
	Id ksuid.KSUID `json:"id"`
}

// GetId returns __GetSessionInput.Id, and is useful for accessing the field via an interface.
func (v *__GetSessionInput) GetId() ksuid.KSUID { return v.Id }

// __GetSessionsEdgesInput is used internally by genqlient
type __GetSessionsEdgesInput struct {
	First  *int    `json:"first"`
	Last   *int    `json:"last"`
	Before *string `json:"before"`
	After  *string `json:"after"`
}

// GetFirst returns __GetSessionsEdgesInput.First, and is useful for accessing the field via an interface.
func (v *__GetSessionsEdgesInput) GetFirst() *int { return v.First }

// GetLast returns __GetSessionsEdgesInput.Last, and is useful for accessing the field via an interface.
func (v *__GetSessionsEdgesInput) GetLast() *int { return v.Last }

// GetBefore returns __GetSessionsEdgesInput.Before, and is useful for accessing the field via an interface.
func (v *__GetSessionsEdgesInput) GetBefore() *string { return v.Before }

// GetAfter returns __GetSessionsEdgesInput.After, and is useful for accessing the field via an interface.
func (v *__GetSessionsEdgesInput) GetAfter() *string { return v.After }

// __GetSessionsNodesInput is used internally by genqlient
type __GetSessionsNodesInput struct {
	First  *int    `json:"first"`
	Last   *int    `json:"last"`
	Before *string `json:"before"`
	After  *string `json:"after"`
}

// GetFirst returns __GetSessionsNodesInput.First, and is useful for accessing the field via an interface.
func (v *__GetSessionsNodesInput) GetFirst() *int { return v.First }

// GetLast returns __GetSessionsNodesInput.Last, and is useful for accessing the field via an interface.
func (v *__GetSessionsNodesInput) GetLast() *int { return v.Last }

// GetBefore returns __GetSessionsNodesInput.Before, and is useful for accessing the field via an interface.
func (v *__GetSessionsNodesInput) GetBefore() *string { return v.Before }

// GetAfter returns __GetSessionsNodesInput.After, and is useful for accessing the field via an interface.
func (v *__GetSessionsNodesInput) GetAfter() *string { return v.After }

// __GetTotalUserPostsCountInput is used internally by genqlient
type __GetTotalUserPostsCountInput struct {
	UserId ksuid.KSUID `json:"userId"`
}

// GetUserId returns __GetTotalUserPostsCountInput.UserId, and is useful for accessing the field via an interface.
func (v *__GetTotalUserPostsCountInput) GetUserId() ksuid.KSUID { return v.UserId }

// __GetUserInput is used internally by genqlient
type __GetUserInput struct {
	Id ksuid.KSUID `json:"id"`
}

// GetId returns __GetUserInput.Id, and is useful for accessing the field via an interface.
func (v *__GetUserInput) GetId() ksuid.KSUID { return v.Id }

// __GetUserPostsEdgesInput is used internally by genqlient
type __GetUserPostsEdgesInput struct {
	UserId ksuid.KSUID `json:"userId"`
	First  *int        `json:"first"`
	Last   *int        `json:"last"`
	Before *string     `json:"before"`
	After  *string     `json:"after"`
}

// GetUserId returns __GetUserPostsEdgesInput.UserId, and is useful for accessing the field via an interface.
func (v *__GetUserPostsEdgesInput) GetUserId() ksuid.KSUID { return v.UserId }

// GetFirst returns __GetUserPostsEdgesInput.First, and is useful for accessing the field via an interface.
func (v *__GetUserPostsEdgesInput) GetFirst() *int { return v.First }

// GetLast returns __GetUserPostsEdgesInput.Last, and is useful for accessing the field via an interface.
func (v *__GetUserPostsEdgesInput) GetLast() *int { return v.Last }

// GetBefore returns __GetUserPostsEdgesInput.Before, and is useful for accessing the field via an interface.
func (v *__GetUserPostsEdgesInput) GetBefore() *string { return v.Before }

// GetAfter returns __GetUserPostsEdgesInput.After, and is useful for accessing the field via an interface.
func (v *__GetUserPostsEdgesInput) GetAfter() *string { return v.After }

// __GetUserPostsNodesInput is used internally by genqlient
type __GetUserPostsNodesInput struct {
	UserId ksuid.KSUID `json:"userId"`
	First  *int        `json:"first"`
	Last   *int        `json:"last"`
	Before *string     `json:"before"`
	After  *string     `json:"after"`
}

// GetUserId returns __GetUserPostsNodesInput.UserId, and is useful for accessing the field via an interface.
func (v *__GetUserPostsNodesInput) GetUserId() ksuid.KSUID { return v.UserId }

// GetFirst returns __GetUserPostsNodesInput.First, and is useful for accessing the field via an interface.
func (v *__GetUserPostsNodesInput) GetFirst() *int { return v.First }

// GetLast returns __GetUserPostsNodesInput.Last, and is useful for accessing the field via an interface.
func (v *__GetUserPostsNodesInput) GetLast() *int { return v.Last }

// GetBefore returns __GetUserPostsNodesInput.Before, and is useful for accessing the field via an interface.
func (v *__GetUserPostsNodesInput) GetBefore() *string { return v.Before }

// GetAfter returns __GetUserPostsNodesInput.After, and is useful for accessing the field via an interface.
func (v *__GetUserPostsNodesInput) GetAfter() *string { return v.After }

// __RefreshTokenInput is used internally by genqlient
type __RefreshTokenInput struct {
	Input types.SessionCredInput `json:"input"`
}

// GetInput returns __RefreshTokenInput.Input, and is useful for accessing the field via an interface.
func (v *__RefreshTokenInput) GetInput() types.SessionCredInput { return v.Input }

// __SignInInput is used internally by genqlient
type __SignInInput struct {
	Input types.SignInInput `json:"input"`
}

// GetInput returns __SignInInput.Input, and is useful for accessing the field via an interface.
func (v *__SignInInput) GetInput() types.SignInInput { return v.Input }

// __SignUpInput is used internally by genqlient
type __SignUpInput struct {
	Input types.SignUpInput `json:"input"`
}

// GetInput returns __SignUpInput.Input, and is useful for accessing the field via an interface.
func (v *__SignUpInput) GetInput() types.SignUpInput { return v.Input }

// __UpdatePostInput is used internally by genqlient
type __UpdatePostInput struct {
	Input types.UpdatePostInput `json:"input"`
}

// GetInput returns __UpdatePostInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdatePostInput) GetInput() types.UpdatePostInput { return v.Input }

func CreatePost(
	ctx context.Context,
	client graphql.Client,
	input types.CreatePostInput,
) (*CreatePostResponse, error) {
	req := &graphql.Request{
		OpName: "CreatePost",
		Query: `
mutation CreatePost ($input: CreatePostInput!) {
	createPost(input: $input)
}
`,
		Variables: &__CreatePostInput{
			Input: input,
		},
	}
	var err error

	var data CreatePostResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeletePost(
	ctx context.Context,
	client graphql.Client,
	id ksuid.KSUID,
) (*DeletePostResponse, error) {
	req := &graphql.Request{
		OpName: "DeletePost",
		Query: `
mutation DeletePost ($id: ID!) {
	deletePost(id: $id)
}
`,
		Variables: &__DeletePostInput{
			Id: id,
		},
	}
	var err error

	var data DeletePostResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteSession(
	ctx context.Context,
	client graphql.Client,
	id ksuid.KSUID,
) (*DeleteSessionResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteSession",
		Query: `
mutation DeleteSession ($id: ID!) {
	deleteSession(id: $id)
}
`,
		Variables: &__DeleteSessionInput{
			Id: id,
		},
	}
	var err error

	var data DeleteSessionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ForgotPassword(
	ctx context.Context,
	client graphql.Client,
	input types.ForgotPasswordInput,
) (*ForgotPasswordResponse, error) {
	req := &graphql.Request{
		OpName: "ForgotPassword",
		Query: `
mutation ForgotPassword ($input: ForgotPasswordInput!) {
	forgotPassword(input: $input)
}
`,
		Variables: &__ForgotPasswordInput{
			Input: input,
		},
	}
	var err error

	var data ForgotPasswordResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetMe(
	ctx context.Context,
	client graphql.Client,
) (*GetMeResponse, error) {
	req := &graphql.Request{
		OpName: "GetMe",
		Query: `
query GetMe {
	me {
		id
		username
		verified
		avatarUrl
	}
}
`,
	}
	var err error

	var data GetMeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetPost(
	ctx context.Context,
	client graphql.Client,
	id ksuid.KSUID,
) (*GetPostResponse, error) {
	req := &graphql.Request{
		OpName: "GetPost",
		Query: `
query GetPost ($id: ID!) {
	post(id: $id) {
		author {
			id
		}
		text
		updatedAt
		attachments
	}
}
`,
		Variables: &__GetPostInput{
			Id: id,
		},
	}
	var err error

	var data GetPostResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetSession(
	ctx context.Context,
	client graphql.Client,
	id ksuid.KSUID,
) (*GetSessionResponse, error) {
	req := &graphql.Request{
		OpName: "GetSession",
		Query: `
query GetSession ($id: ID!) {
	session(id: $id) {
		userId
		ip
		expiresIn
	}
}
`,
		Variables: &__GetSessionInput{
			Id: id,
		},
	}
	var err error

	var data GetSessionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetSessionsEdges(
	ctx context.Context,
	client graphql.Client,
	first *int,
	last *int,
	before *string,
	after *string,
) (*GetSessionsEdgesResponse, error) {
	req := &graphql.Request{
		OpName: "GetSessionsEdges",
		Query: `
query GetSessionsEdges ($first: Int, $last: Int, $before: String, $after: String) {
	sessions(first: $first, last: $last, before: $before, after: $after) {
		edges {
			cursor
			node {
				id
				userId
				ip
				expiresIn
			}
		}
	}
}
`,
		Variables: &__GetSessionsEdgesInput{
			First:  first,
			Last:   last,
			Before: before,
			After:  after,
		},
	}
	var err error

	var data GetSessionsEdgesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetSessionsNodes(
	ctx context.Context,
	client graphql.Client,
	first *int,
	last *int,
	before *string,
	after *string,
) (*GetSessionsNodesResponse, error) {
	req := &graphql.Request{
		OpName: "GetSessionsNodes",
		Query: `
query GetSessionsNodes ($first: Int, $last: Int, $before: String, $after: String) {
	sessions(first: $first, last: $last, before: $before, after: $after) {
		nodes {
			id
			userId
			ip
			expiresIn
		}
	}
}
`,
		Variables: &__GetSessionsNodesInput{
			First:  first,
			Last:   last,
			Before: before,
			After:  after,
		},
	}
	var err error

	var data GetSessionsNodesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetTotalSessionsCount(
	ctx context.Context,
	client graphql.Client,
) (*GetTotalSessionsCountResponse, error) {
	req := &graphql.Request{
		OpName: "GetTotalSessionsCount",
		Query: `
query GetTotalSessionsCount {
	sessions {
		totalCount
	}
}
`,
	}
	var err error

	var data GetTotalSessionsCountResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetTotalUserPostsCount(
	ctx context.Context,
	client graphql.Client,
	userId ksuid.KSUID,
) (*GetTotalUserPostsCountResponse, error) {
	req := &graphql.Request{
		OpName: "GetTotalUserPostsCount",
		Query: `
query GetTotalUserPostsCount ($userId: ID!) {
	user(id: $userId) {
		posts {
			totalCount
		}
	}
}
`,
		Variables: &__GetTotalUserPostsCountInput{
			UserId: userId,
		},
	}
	var err error

	var data GetTotalUserPostsCountResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetUser(
	ctx context.Context,
	client graphql.Client,
	id ksuid.KSUID,
) (*GetUserResponse, error) {
	req := &graphql.Request{
		OpName: "GetUser",
		Query: `
query GetUser ($id: ID!) {
	user(id: $id) {
		username
		verified
		avatarUrl
	}
}
`,
		Variables: &__GetUserInput{
			Id: id,
		},
	}
	var err error

	var data GetUserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetUserPostsEdges(
	ctx context.Context,
	client graphql.Client,
	userId ksuid.KSUID,
	first *int,
	last *int,
	before *string,
	after *string,
) (*GetUserPostsEdgesResponse, error) {
	req := &graphql.Request{
		OpName: "GetUserPostsEdges",
		Query: `
query GetUserPostsEdges ($userId: ID!, $first: Int, $last: Int, $before: String, $after: String) {
	user(id: $userId) {
		posts(first: $first, last: $last, before: $before, after: $after) {
			edges {
				cursor
				node {
					id
					author {
						id
					}
					text
					updatedAt
					attachments
				}
			}
		}
	}
}
`,
		Variables: &__GetUserPostsEdgesInput{
			UserId: userId,
			First:  first,
			Last:   last,
			Before: before,
			After:  after,
		},
	}
	var err error

	var data GetUserPostsEdgesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetUserPostsNodes(
	ctx context.Context,
	client graphql.Client,
	userId ksuid.KSUID,
	first *int,
	last *int,
	before *string,
	after *string,
) (*GetUserPostsNodesResponse, error) {
	req := &graphql.Request{
		OpName: "GetUserPostsNodes",
		Query: `
query GetUserPostsNodes ($userId: ID!, $first: Int, $last: Int, $before: String, $after: String) {
	user(id: $userId) {
		posts(first: $first, last: $last, before: $before, after: $after) {
			nodes {
				id
				author {
					id
				}
				text
				updatedAt
				attachments
			}
		}
	}
}
`,
		Variables: &__GetUserPostsNodesInput{
			UserId: userId,
			First:  first,
			Last:   last,
			Before: before,
			After:  after,
		},
	}
	var err error

	var data GetUserPostsNodesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func RefreshToken(
	ctx context.Context,
	client graphql.Client,
	input types.SessionCredInput,
) (*RefreshTokenResponse, error) {
	req := &graphql.Request{
		OpName: "RefreshToken",
		Query: `
mutation RefreshToken ($input: SessionCredInput!) {
	refreshToken(input: $input)
}
`,
		Variables: &__RefreshTokenInput{
			Input: input,
		},
	}
	var err error

	var data RefreshTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func SignIn(
	ctx context.Context,
	client graphql.Client,
	input types.SignInInput,
) (*SignInResponse, error) {
	req := &graphql.Request{
		OpName: "SignIn",
		Query: `
mutation SignIn ($input: SignInInput!) {
	signIn(input: $input) {
		access
		refresh
	}
}
`,
		Variables: &__SignInInput{
			Input: input,
		},
	}
	var err error

	var data SignInResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func SignUp(
	ctx context.Context,
	client graphql.Client,
	input types.SignUpInput,
) (*SignUpResponse, error) {
	req := &graphql.Request{
		OpName: "SignUp",
		Query: `
mutation SignUp ($input: SignUpInput!) {
	signUp(input: $input) {
		access
		refresh
	}
}
`,
		Variables: &__SignUpInput{
			Input: input,
		},
	}
	var err error

	var data SignUpResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdatePost(
	ctx context.Context,
	client graphql.Client,
	input types.UpdatePostInput,
) (*UpdatePostResponse, error) {
	req := &graphql.Request{
		OpName: "UpdatePost",
		Query: `
mutation UpdatePost ($input: UpdatePostInput!) {
	updatePost(input: $input)
}
`,
		Variables: &__UpdatePostInput{
			Input: input,
		},
	}
	var err error

	var data UpdatePostResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
